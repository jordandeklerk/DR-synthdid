"""Test of NPIV implementation against R npiv package results."""

import numpy as np

from moderndid.didcont.npiv import npiv


def test_npiv_comprehensive_against_r(engel_data):
    food = engel_data["food"]
    logexp = engel_data["logexp"]
    logwages = engel_data["logwages"]

    x_eval = np.linspace(4.5, 6.5, 100)

    result = npiv(
        y=food,
        x=logexp,
        w=logwages,
        x_eval=x_eval.reshape(-1, 1),
        j_x_degree=3,
        j_x_segments=1,
        k_w_degree=4,
        k_w_segments=4,
        knots="uniform",
        deriv_index=1,
        deriv_order=1,
        ucb_h=True,
        ucb_deriv=True,
        boot_num=99,
        seed=42,
    )

    expected_h = np.array(
        [
            0.2613976,
            0.2602563,
            0.2591179,
            0.2579822,
            0.2568490,
            0.2557181,
            0.2545892,
            0.2534623,
            0.2523369,
            0.2512130,
            0.2500903,
            0.2489686,
            0.2478477,
            0.2467273,
            0.2456073,
            0.2444874,
            0.2433674,
            0.2422471,
            0.2411263,
            0.2400048,
            0.2388823,
            0.2377587,
            0.2366336,
            0.2355070,
            0.2343786,
            0.2332482,
            0.2321155,
            0.2309803,
            0.2298425,
            0.2287018,
            0.2275580,
            0.2264109,
            0.2252603,
            0.2241059,
            0.2229475,
            0.2217849,
            0.2206180,
            0.2194464,
            0.2182701,
            0.2170886,
            0.2159019,
            0.2147098,
            0.2135119,
            0.2123082,
            0.2110983,
            0.2098821,
            0.2086593,
            0.2074298,
            0.2061933,
            0.2049496,
            0.2036985,
            0.2024397,
            0.2011731,
            0.1998985,
            0.1986155,
            0.1973241,
            0.1960240,
            0.1947149,
            0.1933967,
            0.1920692,
            0.1907320,
            0.1893851,
            0.1880282,
            0.1866611,
            0.1852836,
            0.1838953,
            0.1824963,
            0.1810861,
            0.1796647,
            0.1782318,
            0.1767871,
            0.1753305,
            0.1738617,
            0.1723806,
            0.1708868,
            0.1693803,
            0.1678607,
            0.1663279,
            0.1647817,
            0.1632218,
            0.1616480,
            0.1600601,
            0.1584579,
            0.1568412,
            0.1552098,
            0.1535633,
            0.1519017,
            0.1502248,
            0.1485322,
            0.1468237,
            0.1450993,
            0.1433586,
            0.1416014,
            0.1398276,
            0.1380368,
            0.1362289,
            0.1344037,
            0.1325610,
            0.1307005,
            0.1288220,
        ]
    )

    expected_deriv = np.array(
        [
            -0.05657280,
            -0.05642227,
            -0.05628240,
            -0.05615321,
            -0.05603469,
            -0.05592684,
            -0.05582965,
            -0.05574314,
            -0.05566730,
            -0.05560213,
            -0.05554764,
            -0.05550381,
            -0.05547065,
            -0.05544816,
            -0.05543635,
            -0.05543520,
            -0.05544473,
            -0.05546493,
            -0.05549579,
            -0.05553733,
            -0.05558954,
            -0.05565242,
            -0.05572597,
            -0.05581019,
            -0.05590508,
            -0.05601064,
            -0.05612687,
            -0.05625378,
            -0.05639135,
            -0.05653960,
            -0.05669851,
            -0.05686810,
            -0.05704835,
            -0.05723928,
            -0.05744088,
            -0.05765315,
            -0.05787609,
            -0.05810970,
            -0.05835398,
            -0.05860893,
            -0.05887455,
            -0.05915085,
            -0.05943781,
            -0.05973544,
            -0.06004375,
            -0.06036272,
            -0.06069237,
            -0.06103269,
            -0.06138368,
            -0.06174534,
            -0.06211766,
            -0.06250066,
            -0.06289434,
            -0.06329868,
            -0.06371369,
            -0.06413937,
            -0.06457573,
            -0.06502275,
            -0.06548044,
            -0.06594881,
            -0.06642785,
            -0.06691755,
            -0.06741793,
            -0.06792898,
            -0.06845070,
            -0.06898309,
            -0.06952615,
            -0.07007988,
            -0.07064428,
            -0.07121936,
            -0.07180510,
            -0.07240151,
            -0.07300860,
            -0.07362635,
            -0.07425478,
            -0.07489388,
            -0.07554364,
            -0.07620408,
            -0.07687519,
            -0.07755697,
            -0.07824942,
            -0.07895254,
            -0.07966633,
            -0.08039080,
            -0.08112593,
            -0.08187173,
            -0.08262821,
            -0.08339535,
            -0.08417317,
            -0.08496165,
            -0.08576081,
            -0.08657064,
            -0.08739114,
            -0.08822231,
            -0.08906415,
            -0.08991666,
            -0.09077984,
            -0.09165369,
            -0.09253822,
            -0.09343341,
        ]
    )

    np.testing.assert_allclose(
        result.h, expected_h, rtol=1e-3, atol=1e-5, err_msg="Function estimates (h) don't match R implementation"
    )

    np.testing.assert_allclose(
        result.deriv, expected_deriv, rtol=1e-3, atol=1e-5, err_msg="Derivative estimates don't match R implementation"
    )

    assert np.all(result.deriv < 0), "All derivatives should be negative"

    diff_deriv = np.diff(result.deriv)
    assert np.sum(diff_deriv <= 0) > 80, "Derivative should be mostly decreasing (>80%)"


def test_npiv_confidence_bands_against_r(engel_data):
    food = engel_data["food"]
    logexp = engel_data["logexp"]
    logwages = engel_data["logwages"]

    x_eval = np.linspace(4.5, 6.5, 100)

    result = npiv(
        y=food,
        x=logexp,
        w=logwages,
        x_eval=x_eval.reshape(-1, 1),
        j_x_degree=3,
        j_x_segments=1,
        k_w_degree=4,
        k_w_segments=4,
        knots="uniform",
        ucb_h=True,
        ucb_deriv=True,
        boot_num=99,
        seed=42,
    )

    expected_h_lower = np.array(
        [
            0.18051009,
            0.18398483,
            0.18721942,
            0.19021683,
            0.19298016,
            0.19551267,
            0.19781784,
            0.19989945,
            0.20176173,
            0.20340939,
            0.20484779,
            0.20608303,
            0.20712207,
            0.20797281,
            0.20864414,
            0.20914596,
            0.20948915,
            0.20968544,
            0.20974726,
            0.20968755,
            0.20951944,
            0.20925607,
            0.20891025,
            0.20849420,
            0.20801938,
            0.20749626,
            0.20693422,
            0.20634142,
            0.20572478,
            0.20508993,
            0.20444125,
            0.20378189,
            0.20311377,
            0.20243768,
            0.20175329,
            0.20105920,
            0.20035302,
            0.19963137,
            0.19889003,
            0.19812391,
            0.19732725,
            0.19649368,
            0.19561643,
            0.19468850,
            0.19370297,
            0.19265327,
            0.19153349,
            0.19033873,
            0.18906538,
            0.18771130,
            0.18627598,
            0.18476051,
            0.18316751,
            0.18150091,
            0.17976570,
            0.17796767,
            0.17611314,
            0.17420868,
            0.17226098,
            0.17027660,
            0.16826191,
            0.16622300,
            0.16416558,
            0.16209500,
            0.16001617,
            0.15793360,
            0.15585134,
            0.15377299,
            0.15170172,
            0.14964018,
            0.14759056,
            0.14555450,
            0.14353309,
            0.14152683,
            0.13953554,
            0.13755835,
            0.13559361,
            0.13363878,
            0.13169041,
            0.12974400,
            0.12779392,
            0.12583330,
            0.12385398,
            0.12184641,
            0.11979960,
            0.11770110,
            0.11553705,
            0.11329228,
            0.11095044,
            0.10849425,
            0.10590582,
            0.10316700,
            0.10025981,
            0.09716683,
            0.09387159,
            0.09035892,
            0.08661517,
            0.08262839,
            0.07838829,
            0.07388626,
        ]
    )

    expected_h_upper = np.array(
        [
            0.3422852,
            0.3365277,
            0.3310163,
            0.3257475,
            0.3207178,
            0.3159235,
            0.3113607,
            0.3070251,
            0.3029121,
            0.2990166,
            0.2953328,
            0.2918541,
            0.2885732,
            0.2854817,
            0.2825704,
            0.2798287,
            0.2772456,
            0.2748087,
            0.2725053,
            0.2703220,
            0.2682451,
            0.2662612,
            0.2643570,
            0.2625199,
            0.2607378,
            0.2590001,
            0.2572967,
            0.2556193,
            0.2539603,
            0.2523137,
            0.2506748,
            0.2490399,
            0.2474067,
            0.2457740,
            0.2441417,
            0.2425107,
            0.2408830,
            0.2392615,
            0.2376501,
            0.2360533,
            0.2344766,
            0.2329259,
            0.2314074,
            0.2299279,
            0.2284937,
            0.2271109,
            0.2257852,
            0.2245209,
            0.2233212,
            0.2221879,
            0.2211210,
            0.2201189,
            0.2191787,
            0.2182960,
            0.2174654,
            0.2166805,
            0.2159348,
            0.2152211,
            0.2145324,
            0.2138617,
            0.2132022,
            0.2125473,
            0.2118909,
            0.2112272,
            0.2105509,
            0.2098571,
            0.2091412,
            0.2083993,
            0.2076277,
            0.2068233,
            0.2059836,
            0.2051064,
            0.2041903,
            0.2032343,
            0.2022381,
            0.2012022,
            0.2001279,
            0.1990171,
            0.1978730,
            0.1966996,
            0.1955021,
            0.1942870,
            0.1930619,
            0.1918360,
            0.1906199,
            0.1894256,
            0.1882664,
            0.1871572,
            0.1861139,
            0.1851532,
            0.1842928,
            0.1835502,
            0.1829430,
            0.1824883,
            0.1822020,
            0.1820990,
            0.1821923,
            0.1824936,
            0.1830127,
            0.1837578,
        ]
    )

    assert result.h_lower is not None, "Lower confidence band for h should exist"
    assert result.h_upper is not None, "Upper confidence band for h should exist"

    np.testing.assert_allclose(
        result.h_lower,
        expected_h_lower,
        rtol=0.3,
        atol=0.03,
        err_msg="h_lower confidence bands don't match R implementation within reasonable tolerance",
    )

    np.testing.assert_allclose(
        result.h_upper,
        expected_h_upper,
        rtol=0.3,
        atol=0.03,
        err_msg="h_upper confidence bands don't match R implementation within reasonable tolerance",
    )

    assert np.all(result.h_lower <= result.h), "Lower band should be <= estimate"
    assert np.all(result.h <= result.h_upper), "Estimate should be <= upper band"

    band_width = result.h_upper - result.h_lower
    assert np.all(band_width > 0.01), "Confidence bands should have meaningful width"
    assert np.all(band_width < 0.3), "Confidence bands shouldn't be too wide"


def test_npiv_derivative_confidence_bands_structure(engel_data):
    food = engel_data["food"]
    logexp = engel_data["logexp"]
    logwages = engel_data["logwages"]

    x_eval = np.linspace(4.5, 6.5, 100)

    result = npiv(
        y=food,
        x=logexp,
        w=logwages,
        x_eval=x_eval.reshape(-1, 1),
        j_x_degree=3,
        j_x_segments=1,
        k_w_degree=4,
        k_w_segments=4,
        knots="uniform",
        ucb_h=True,
        ucb_deriv=True,
        boot_num=99,
        seed=42,
    )

    assert result.h_lower_deriv is not None, "Lower deriv confidence band should exist"
    assert result.h_upper_deriv is not None, "Upper deriv confidence band should exist"

    assert result.h_lower_deriv.shape == (100,), "h_lower_deriv should have 100 points"
    assert result.h_upper_deriv.shape == (100,), "h_upper_deriv should have 100 points"

    assert np.all(result.h_lower_deriv <= result.deriv), "Lower deriv <= estimate"
    assert np.all(result.deriv <= result.h_upper_deriv), "Estimate <= upper deriv"

    assert np.all(result.h_lower_deriv < 0), "Lower deriv band should be negative"
    assert np.mean(result.h_lower_deriv) < np.mean(result.deriv), "Lower deriv should be more negative on average"

    assert np.any(result.h_upper_deriv > 0), "Upper deriv should have some positive values"
    assert np.any(result.h_upper_deriv < 0), "Upper deriv should have some negative values"

    assert np.all(np.abs(result.h_lower_deriv) < 0.5), "Lower deriv bands should be reasonable"
    assert np.all(np.abs(result.h_upper_deriv) < 0.5), "Upper deriv bands should be reasonable"


def test_npiv_uniform_regularization_against_r(engel_data):
    food = engel_data["food"]
    logexp = engel_data["logexp"]

    x_eval = np.linspace(4.5, 6.5, 100)

    result = npiv(
        y=food,
        x=logexp,
        w=logexp,
        x_eval=x_eval.reshape(-1, 1),
        j_x_degree=3,
        j_x_segments=64,
        k_w_degree=3,
        k_w_segments=64,
        knots="uniform",
        deriv_index=1,
        deriv_order=1,
        ucb_h=True,
        ucb_deriv=True,
        boot_num=99,
        seed=42,
    )

    expected_deriv = np.array(
        [
            1.16331277,
            1.53759653,
            1.17757127,
            0.07377077,
            -1.10750593,
            -1.14594813,
            -0.01541789,
            1.39278012,
            1.68653231,
            0.84938788,
            -0.36759609,
            -0.96886762,
            -0.94964492,
            -0.62264669,
            -0.33713196,
            -0.09336714,
            0.09724559,
            0.22406664,
            0.28692499,
            0.23798828,
            0.03972884,
            -0.30513476,
            -0.52310979,
            -0.43235724,
            -0.04029298,
            0.26199171,
            0.25295398,
            -0.05592724,
            -0.28712915,
            -0.25784314,
            0.01562954,
            0.16422055,
            0.03492779,
            -0.34569591,
            -0.53690662,
            -0.38229312,
            0.07896164,
            0.34905624,
            0.27702038,
            -0.09825256,
            -0.38672813,
            -0.48765674,
            -0.41190051,
            -0.24742188,
            -0.01347473,
            0.25295889,
            0.30585521,
            0.09990685,
            -0.29447685,
            -0.48745755,
            -0.41921121,
            -0.15678839,
            -0.01224063,
            -0.02497001,
            -0.15214663,
            -0.22497649,
            -0.22621211,
            -0.16888302,
            -0.09670513,
            -0.01321436,
            0.05462132,
            0.02950016,
            -0.09338204,
            -0.24097272,
            -0.23403771,
            -0.06436534,
            0.13933579,
            0.10669538,
            -0.17088445,
            -0.50289957,
            -0.54718283,
            -0.29685679,
            0.05872400,
            0.22966107,
            0.21282236,
            0.07868129,
            -0.08126444,
            -0.26663679,
            -0.36198964,
            -0.24117090,
            0.09572592,
            0.34745950,
            0.23904474,
            -0.22763547,
            -0.60495263,
            -0.54895488,
            -0.06558457,
            0.30089273,
            0.19579101,
            -0.36873041,
            -0.79218359,
            -0.74098962,
            -0.23188961,
            0.21167926,
            0.34108626,
            0.17153890,
            0.03341683,
            0.06108083,
            0.22951342,
            0.13777498,
        ]
    )

    expected_h = np.array(
        [
            0.21993376,
            0.24838565,
            0.27706373,
            0.29095570,
            0.27878088,
            0.25405075,
            0.24035182,
            0.25601551,
            0.28902355,
            0.31654277,
            0.32041067,
            0.30586643,
            0.28544292,
            0.26962886,
            0.26000440,
            0.25572624,
            0.25587281,
            0.25922578,
            0.26449636,
            0.27004990,
            0.27310651,
            0.27065156,
            0.26176571,
            0.25159479,
            0.24636798,
            0.24913147,
            0.25485706,
            0.25727088,
            0.25336713,
            0.24742383,
            0.24467634,
            0.24696083,
            0.24944024,
            0.24655295,
            0.23705558,
            0.22718854,
            0.22384912,
            0.22874851,
            0.23564850,
            0.23773772,
            0.23252318,
            0.22337528,
            0.21405145,
            0.20727468,
            0.20452241,
            0.20707984,
            0.21316019,
            0.21769457,
            0.21570049,
            0.20736239,
            0.19776434,
            0.19192808,
            0.19048549,
            0.19037440,
            0.18859394,
            0.18466409,
            0.17998610,
            0.17594863,
            0.17324688,
            0.17211754,
            0.17266144,
            0.17367574,
            0.17319505,
            0.16961282,
            0.16454076,
            0.16125262,
            0.16234730,
            0.16524482,
            0.16500880,
            0.15776900,
            0.14666613,
            0.13764451,
            0.13552601,
            0.13875511,
            0.14354076,
            0.14653169,
            0.14654841,
            0.14307706,
            0.13636388,
            0.12990732,
            0.12807569,
            0.13315862,
            0.13968922,
            0.14039263,
            0.13125316,
            0.11886804,
            0.11198652,
            0.11515728,
            0.12096819,
            0.11990554,
            0.10738006,
            0.09109440,
            0.08061414,
            0.08093889,
            0.08705127,
            0.09263036,
            0.09442152,
            0.09509694,
            0.09795573,
            0.10233867,
        ]
    )

    expected_h_lower = np.array(
        [
            -0.172906432,
            -0.095120231,
            0.016765938,
            0.020251721,
            0.046784123,
            0.007091349,
            -0.100265270,
            -0.057209016,
            0.077380535,
            0.142734193,
            0.161218924,
            0.154140912,
            0.121993421,
            0.129871549,
            0.116966343,
            0.087868791,
            0.113198527,
            0.126949502,
            0.117130986,
            0.152152768,
            0.172787145,
            0.156440290,
            0.162059363,
            0.148241438,
            0.133310046,
            0.157974168,
            0.154974643,
            0.142281950,
            0.157140242,
            0.145284128,
            0.131019312,
            0.152245943,
            0.154122509,
            0.145350379,
            0.156657425,
            0.150901522,
            0.144548157,
            0.160881187,
            0.158374896,
            0.157355292,
            0.166006186,
            0.148982976,
            0.138926669,
            0.147818755,
            0.136966062,
            0.136922317,
            0.149222539,
            0.139873361,
            0.139245694,
            0.144573508,
            0.125220327,
            0.120087775,
            0.127886256,
            0.116780011,
            0.117646693,
            0.124506883,
            0.111412919,
            0.109806921,
            0.107073899,
            0.090372814,
            0.097027556,
            0.107363250,
            0.096578108,
            0.099022614,
            0.097744288,
            0.083513464,
            0.089077178,
            0.074889655,
            0.052170073,
            0.062159737,
            0.056224188,
            0.026489320,
            0.038777303,
            0.047714622,
            0.033314249,
            0.049534069,
            0.056960515,
            0.039967736,
            0.047325177,
            0.047908020,
            0.037868140,
            0.055857627,
            0.051577115,
            0.034742932,
            0.032581342,
            0.004969451,
            -0.011660887,
            0.010426189,
            -0.005822451,
            -0.026608749,
            -0.017538222,
            -0.042566028,
            -0.065629390,
            -0.046564341,
            -0.060885052,
            -0.072693376,
            -0.044628771,
            -0.040137339,
            -0.039043510,
            -0.007297553,
        ]
    )

    expected_h_upper = np.array(
        [
            0.6127739,
            0.5918915,
            0.5373615,
            0.5616597,
            0.5107776,
            0.5010102,
            0.5809689,
            0.5692400,
            0.5006666,
            0.4903513,
            0.4796024,
            0.4575920,
            0.4488924,
            0.4093862,
            0.4030425,
            0.4235837,
            0.3985471,
            0.3915021,
            0.4118617,
            0.3879470,
            0.3734259,
            0.3848628,
            0.3614721,
            0.3549481,
            0.3594259,
            0.3402888,
            0.3547395,
            0.3722598,
            0.3495940,
            0.3495635,
            0.3583334,
            0.3416757,
            0.3447580,
            0.3477555,
            0.3174537,
            0.3034756,
            0.3031501,
            0.2966158,
            0.3129221,
            0.3181201,
            0.2990402,
            0.2977676,
            0.2891762,
            0.2667306,
            0.2720788,
            0.2772374,
            0.2770979,
            0.2955158,
            0.2921553,
            0.2701513,
            0.2703084,
            0.2637684,
            0.2530847,
            0.2639688,
            0.2595412,
            0.2448213,
            0.2485593,
            0.2420903,
            0.2394199,
            0.2538623,
            0.2482953,
            0.2399882,
            0.2498120,
            0.2402030,
            0.2313372,
            0.2389918,
            0.2356174,
            0.2556000,
            0.2778475,
            0.2533783,
            0.2371081,
            0.2487997,
            0.2322747,
            0.2297956,
            0.2537673,
            0.2435293,
            0.2361363,
            0.2461864,
            0.2254026,
            0.2119066,
            0.2182832,
            0.2104596,
            0.2278013,
            0.2460423,
            0.2299250,
            0.2327666,
            0.2356339,
            0.2198884,
            0.2477588,
            0.2664198,
            0.2322983,
            0.2247548,
            0.2268577,
            0.2084421,
            0.2349876,
            0.2579541,
            0.2334718,
            0.2303312,
            0.2349550,
            0.2119749,
        ]
    )

    expected_h_lower_deriv = np.array(
        [
            -7.661646,
            -8.212881,
            -10.228174,
            -7.018202,
            -10.775045,
            -12.035412,
            -5.564031,
            -5.286533,
            -7.159710,
            -5.106412,
            -5.384522,
            -6.188865,
            -4.442704,
            -5.851217,
            -5.518521,
            -3.122378,
            -4.827748,
            -4.720946,
            -2.440100,
            -4.041495,
            -4.267903,
            -2.825558,
            -4.287724,
            -3.939770,
            -2.401915,
            -3.688609,
            -3.261907,
            -2.326565,
            -4.106955,
            -3.672916,
            -2.207716,
            -3.360843,
            -3.072253,
            -2.340175,
            -3.592810,
            -3.030725,
            -1.852508,
            -2.439249,
            -1.944054,
            -1.973879,
            -3.161506,
            -2.609126,
            -2.235174,
            -2.923841,
            -2.037024,
            -1.666591,
            -2.335361,
            -1.775140,
            -2.275204,
            -3.205462,
            -2.346499,
            -2.116906,
            -2.602214,
            -1.810614,
            -2.089075,
            -2.709883,
            -1.958265,
            -2.319445,
            -2.642332,
            -1.630342,
            -2.183749,
            -2.641936,
            -1.827672,
            -2.552415,
            -2.815467,
            -1.883712,
            -2.910972,
            -2.986246,
            -1.967168,
            -4.022261,
            -4.310398,
            -2.421140,
            -3.378926,
            -3.499650,
            -1.921870,
            -3.173918,
            -3.559389,
            -2.310241,
            -3.397308,
            -3.326906,
            -1.926240,
            -2.919889,
            -2.852004,
            -2.488686,
            -4.333698,
            -3.850311,
            -2.803540,
            -4.328309,
            -3.808694,
            -3.192227,
            -5.620858,
            -5.025264,
            -3.491743,
            -4.949798,
            -4.115453,
            -2.905089,
            -4.821844,
            -4.187226,
            -2.863456,
            -4.190656,
        ]
    )

    expected_h_upper_deriv = np.array(
        [
            9.988272,
            11.288074,
            12.583316,
            7.165743,
            8.560033,
            9.743516,
            5.533195,
            8.072093,
            10.532774,
            6.805188,
            4.649330,
            4.251130,
            2.543415,
            4.605924,
            4.844258,
            2.935644,
            5.022239,
            5.169080,
            3.013950,
            4.517471,
            4.347360,
            2.215288,
            3.241504,
            3.075055,
            2.321329,
            4.212592,
            3.767815,
            2.214711,
            3.532696,
            3.157230,
            2.238975,
            3.689284,
            3.142109,
            1.648783,
            2.518997,
            2.266139,
            2.010431,
            3.137362,
            2.498095,
            1.777374,
            2.388050,
            1.633813,
            1.411373,
            2.428997,
            2.010075,
            2.172509,
            2.947072,
            1.974954,
            1.686251,
            2.230547,
            1.508076,
            1.803329,
            2.577733,
            1.760674,
            1.784782,
            2.259930,
            1.505841,
            1.981679,
            2.448922,
            1.603913,
            2.292992,
            2.700936,
            1.640908,
            2.070470,
            2.347392,
            1.754981,
            3.189644,
            3.199637,
            1.625399,
            3.016462,
            3.216032,
            1.827426,
            3.496374,
            3.958973,
            2.347514,
            3.331281,
            3.396861,
            1.776968,
            2.673328,
            2.844565,
            2.117692,
            3.614808,
            3.330094,
            2.033416,
            3.123793,
            2.752401,
            2.672371,
            4.930094,
            4.200276,
            2.454766,
            4.036491,
            3.543285,
            3.027964,
            5.373157,
            4.797626,
            3.248167,
            4.888678,
            4.309388,
            3.322483,
            4.466205,
        ]
    )

    np.testing.assert_allclose(
        result.h, expected_h, rtol=0.1, atol=0.05, err_msg="Function estimates (h) don't match R implementation"
    )

    np.testing.assert_allclose(
        result.deriv, expected_deriv, rtol=0.15, atol=0.2, err_msg="Derivative estimates don't match R implementation"
    )

    # bootstrap uncertainty makes this more difficult to match so we need to be careful here
    if result.h_lower is not None:
        assert result.h_lower.shape == expected_h_lower.shape, "h_lower shape mismatch"
        assert np.median(np.abs(result.h_lower - expected_h_lower)) < 0.1, "Median difference in h_lower too large"

    if result.h_upper is not None:
        assert result.h_upper.shape == expected_h_upper.shape, "h_upper shape mismatch"
        assert np.median(np.abs(result.h_upper - expected_h_upper)) < 0.1, "Median difference in h_upper too large"

    if result.h_lower_deriv is not None:
        assert result.h_lower_deriv.shape == expected_h_lower_deriv.shape, "h_lower_deriv shape mismatch"
        assert np.mean(result.h_lower_deriv < 0) > 0.99, "h_lower_deriv should be mostly negative"

    if result.h_upper_deriv is not None:
        assert result.h_upper_deriv.shape == expected_h_upper_deriv.shape, "h_upper_deriv shape mismatch"
        assert np.any(result.h_upper_deriv > 0), "h_upper_deriv should have positive values"
        assert np.mean(result.h_upper_deriv > result.deriv) > 0.99, (
            "h_upper_deriv should be mostly above the derivative estimate"
        )

    if result.h_lower is not None and result.h_upper is not None:
        assert np.all(result.h_lower <= result.h), "Lower band should be <= estimate"
        assert np.all(result.h <= result.h_upper), "Estimate should be <= upper band"

    if result.h_lower_deriv is not None and result.h_upper_deriv is not None:
        assert np.all(result.h_lower_deriv <= result.deriv), "Lower deriv band should be <= estimate"
        assert np.all(result.deriv <= result.h_upper_deriv), "Estimate should be <= upper deriv band"
